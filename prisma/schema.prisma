generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  COMMON
  ADMIN
  SUPER_ADMIN
}

enum SerialStatus {
  EM_ESTOQUE
  CAUTELADO
  MANUTENCAO
  BAIXADO
}

enum LoanStatus {
  ABERTO
  FECHADO
}

enum LoanType {
  CAUTELA
  EMPRESTIMO_TEMPORARIO
}

enum ItemCondition {
  NOVO
  BOM
  REGULAR
  RUIM
}

model User {
  id                   String   @id @default(cuid())
  email                String   @unique
  name                 String
  phone                String?
  document             String?
  rank                 String?
  warName              String?
  militaryOrganization String?
  password             String
  function             String?
  role                 RoleType @default(COMMON)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  loans    Loan[]
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  equipments Equipment[]

  @@map("categories")
}

model Equipment {
  id          String        @id @default(cuid())
  name        String
  description String?
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  String        @map("category_id")
  amount      Int           @default(0)
  unitPrice   Decimal       @default(0) @db.Decimal(10, 2)
  condition   ItemCondition @default(BOM)
  observation String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  serialNumbers SerialNumber[]
  loans         LoanEquipment[]

  @@index([categoryId])
  @@map("equipments")
}

model SerialNumber {
  id          String        @id @default(cuid())
  number      String        @unique
  equipment   Equipment     @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  equipmentId String        @map("equipment_id")
  status      SerialStatus  @default(EM_ESTOQUE)
  condition   ItemCondition @default(BOM)
  observation String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  loans LoanSerial[]

  @@index([equipmentId])
  @@index([status])
  @@map("serial_numbers")
}

model Customer {
  id                   String   @id @default(cuid())
  name                 String
  email                String?
  phone                String?
  document             String?
  rank                 String?
  warName              String?
  militaryOrganization String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  loans               Loan[]
  EquipmentAlteration EquipmentAlteration[]

  @@map("customers")
}

model Loan {
  id             String     @id @default(cuid())
  orderNumber    Int        @default(autoincrement())
  date           DateTime   @default(now())
  devolutionDate DateTime?
  status         LoanStatus @default(ABERTO)
  observation    String?
  mission        String?
  type           LoanType   @default(CAUTELA)
  urgency        String?

  lender   User   @relation(fields: [lenderId], references: [id])
  lenderId String @map("lender_id")

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @map("customer_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  equipments          LoanEquipment[]
  serialNumbers       LoanSerial[]
  documents           LoanDoc[]
  EquipmentAlteration EquipmentAlteration[]

  @@index([lenderId])
  @@index([status])
  @@index([date])
  @@map("loans")
}

model LoanEquipment {
  id          String    @id @default(cuid())
  loan        Loan      @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId      String    @map("loan_id")
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId String    @map("equipment_id")
  quantity    Int
  totalPrice  Decimal   @default(0) @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())

  @@unique([loanId, equipmentId])
  @@map("loan_equipments")
}

model LoanSerial {
  id             String       @id @default(cuid())
  loan           Loan         @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId         String       @map("loan_id")
  serialNumber   SerialNumber @relation(fields: [serialNumberId], references: [id])
  serialNumberId String       @map("serial_number_id")
  createdAt      DateTime     @default(now())

  @@unique([loanId, serialNumberId])
  @@map("loan_serials")
}

model LoanDoc {
  id        String   @id @default(cuid())
  fileName  String
  filePath  String
  fileType  String
  fileSize  Int
  loan      Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId    String   @map("loan_id")
  createdAt DateTime @default(now())

  @@index([loanId])
  @@map("loan_docs")
}

model EquipmentAlteration {
  id           String   @id @default(cuid())
  desc         String
  mission      String
  location     String
  date         DateTime
  equipment    String
  serialNumber String[]
  amount       String
  loanId       String?  @map("loan_id")
  customerId   String   @map("customer_id")

  loan     Loan?    @relation(fields: [loanId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([loanId])
  @@map("equipment_alterations")
}
